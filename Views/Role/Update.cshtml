@using LaVie.Enums
@{
    ViewData["Title"] = "Update a role";
}

<div class="page-bar">
    @await Html.PartialAsync("Components/_Breadcrumbs")
    @await Html.PartialAsync("Components/_BackButton")
</div>

@* All permissions *@
<h1 class="page-text font-bold text-xl mb-4">All Permissions</h1>
<div class="flex gap-2 flex-wrap mb-8">
    @foreach (var permission in Enum.GetValues(typeof(PERMISSIONS)))
    {
        <span class="badge primary cursor-grab permission" id="@permission" draggable="true"
            ondragstart="drag(event)">@permission</span>
    }
</div>

@* Role permissions (dropzone) *@
<h1 class="page-text font-bold text-xl mb-4">Role Permissions</h1>
<div class="dropzone" ondragover="allowDrop(event)" ondrop="drop(event)">
    @foreach (var permission in ViewBag.Permissions)
    {
        <span class="badge primary cursor-grab role-permission">@(permission.Value)</span>
    }
</div>

<script>
    const allowDrop = (event) => {
        event.preventDefault();
    }

    const drag = (event) => {
        event.dataTransfer.setData("text", event.target.id);
    }

    const drop = (event) => {

        const data = event.dataTransfer.getData("text");
        const draggable = document.getElementById(data);
        const addedPermissions = [...document.querySelectorAll(".role-permission")].map(permissionSpan => {
            return permissionSpan.innerHTML.trim();
        });

        if (addedPermissions.includes(draggable.innerHTML.trim())) {
            window.alert("Already added");
            return;
        }


        event.preventDefault();


        let dropzone = event.target;

        if (dropzone.classList.contains("role-permission")) {
            dropzone = dropzone.parentNode;

        }
        dropzone.appendChild(draggable);
    }
</script>